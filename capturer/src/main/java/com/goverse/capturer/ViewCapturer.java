package com.goverse.capturer;
import android.graphics.Bitmap;
import android.view.View;
import com.goverse.capturer.cropper.DefaultCropper;
import com.goverse.capturer.cropper.ICropper;
import com.goverse.capturer.transformation.ITransformation;
import java.util.ArrayList;
import java.util.List;

public final class ViewCapturer {

    /**
     * Interface definition for a callback to be invoked when the webview has been captured,and
     * bitmap will be return by then.
     */
    public interface OnCaptureListener {
        /**
         * onViewCaptured
         * @param bitmap bitmap generated by capturing view
         */
        void onViewCaptured(Bitmap bitmap);
    }

    private View mView;
    private ICropper mCropper;
    private List<ITransformation> mTransformationList = new ArrayList<>();
    private OnCaptureListener mOnCaptureListener;

    private ViewCapturer(Builder builder) {

        mView = builder.view;
        mCropper = builder.cropper;
        mTransformationList = builder.transformationList;
        mOnCaptureListener = builder.onCaptureListener;
    }

    /**
     * capture
     */
    public void capture() {

        if (mCropper == null) {
            mCropper = new DefaultCropper();
        }

        mCropper.crop(mView, new ICropper.OnCropListener() {
            @Override
            public void onCropped(Bitmap bitmap) {
                transformBitmap(bitmap);
            }
        });

    }

    private void transformBitmap(final Bitmap srcBitmap) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                Bitmap resBitmap = srcBitmap;
                if (resBitmap != null && mTransformationList.size() > 0) {
                    for (ITransformation transformation : mTransformationList) {
                        resBitmap = transformation.transform(resBitmap);
                    }
                }
                if (mOnCaptureListener != null) {
                    final Bitmap finalResBitmap = resBitmap;
                    mView.post(new Runnable() {
                        @Override
                        public void run() {
                            mOnCaptureListener.onViewCaptured(finalResBitmap);
                        }
                    });
                }
            }
        }).start();
    }

    public static class Builder {

        private View view;
        private ICropper cropper;
        private List<ITransformation> transformationList = new ArrayList<>();
        private OnCaptureListener onCaptureListener;
        public Builder(View view) {
            this.view = view;
        }

        /**
         * set Cropper
         * @param cropper cropper
         * @return ViewCapturer.Builder
         */
        public Builder setCropper(ICropper cropper) {
            this.cropper = cropper;
            return this;
        }

        /**
         * add Transformation
         * @param transformation transformation
         * @return ViewCapturer.Builder
         */
        public Builder addTransformation(ITransformation transformation) {
            if (!transformationList.contains(transformation)) {
                transformationList.add(transformation);
            }
            return this;
        }

        /**
         * set OnCaptureListener
         * @param onCaptureListener onCaptureListener
         * @return ViewCapturer.Builder
         */
        public Builder setOnCaptureListener(OnCaptureListener onCaptureListener) {
            this.onCaptureListener = onCaptureListener;
            return this;
        }

        public ViewCapturer build() {
            return new ViewCapturer(this);
        }
    }


}
